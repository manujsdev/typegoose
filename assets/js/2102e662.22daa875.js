"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[2807],{5680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>g});var a=r(6540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(r),y=o,g=u["".concat(s,".").concat(y)]||u[y]||d[y]||n;return r?a.createElement(g,i(i({ref:t},l),{},{components:r})):a.createElement(g,i({ref:t},l))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=y;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var c=2;c<n;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}y.displayName="MDXCreateElement"},8306:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>p,toc:()=>c});var a=r(8168),o=(r(6540),r(5680));const n={id:"use-without-emitDecoratorMetadata",title:'Use Without "emitDecoratorMetadata"'},i=void 0,p={unversionedId:"guides/use-without-emitDecoratorMetadata",id:"guides/use-without-emitDecoratorMetadata",title:'Use Without "emitDecoratorMetadata"',description:"Typegoose can be used without the option emitDecoratorMetadata, but it is generally recommended to enable it for auto-inferring from the typescript type.",source:"@site/../docs/guides/use-without-emitDecoratorMetadata.md",sourceDirName:"guides",slug:"/guides/use-without-emitDecoratorMetadata",permalink:"/typegoose/docs/guides/use-without-emitDecoratorMetadata",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/use-without-emitDecoratorMetadata.md",tags:[],version:"current",frontMatter:{id:"use-without-emitDecoratorMetadata",title:'Use Without "emitDecoratorMetadata"'},sidebar:"guides",previous:{title:"All Decorators",permalink:"/typegoose/docs/guides/all-decorators"},next:{title:"Motivation",permalink:"/typegoose/docs/guides/motivation"}},s={},c=[{value:"Advantages to &quot;emitDecoratorMetadata&quot;",id:"advantages-to-emitdecoratormetadata",level:2},{value:"References",id:"references",level:2}],l={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.yg)(u,(0,a.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Typegoose can be used without the option ",(0,o.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata"},(0,o.yg)("inlineCode",{parentName:"a"},"emitDecoratorMetadata")),", but it is generally recommended to enable it for auto-inferring from the typescript type."),(0,o.yg)("h2",{id:"advantages-to-emitdecoratormetadata"},'Advantages to "emitDecoratorMetadata"'),(0,o.yg)("p",null,"When using ",(0,o.yg)("inlineCode",{parentName:"p"},"emitDecoratorMetadata"),", it is not needed to be explicit about ",(0,o.yg)("em",{parentName:"p"},"everything"),', like the following example would simply "compile" into the appropriate types.'),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"Some properties (like Arrays & Maps) need to be always explicit, see ",(0,o.yg)("a",{parentName:"p",href:"/typegoose/docs/api/decorators/prop#array-options"},(0,o.yg)("inlineCode",{parentName:"a"},"@prop")," Array Options"),".")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'class Kitten {\n  @prop({ required: true }) // Not needed to be explicit that this property is a "String"\n  public name!: string;\n\n  @prop({ type: () => [String], required: true })\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true })\n  public favoritePlacePriority!: Map<string, number>;\n}\n')),(0,o.yg)("p",null,"But when not using ",(0,o.yg)("inlineCode",{parentName:"p"},"emitDecoratorMetadata"),", every property needs to be explicitly defined:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'class Kitten {\n  @prop({ type: () => String, required: true }) // Needs to be explicitly defined, because "emitDecoratorMetadata" is not enabled\n  public name!: string;\n\n  @prop({ type: () => [String], required: true }, PropType.ARRAY)\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true }, PropType.MAP)\n  public favoritePlacePriority!: Map<string, number>;\n}\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/typegoose/docs/api/decorators/prop#proptype"},"Look here for what ",(0,o.yg)("inlineCode",{parentName:"a"},"PropType")," is")),(0,o.yg)("h2",{id:"references"},"References"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata"},"tsconfig option ",(0,o.yg)("inlineCode",{parentName:"a"},"emitDecoratorMetadata"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/decorators.html#metadata"},"Typescript explanation to decorators and Reflection"))))}d.isMDXComponent=!0}}]);