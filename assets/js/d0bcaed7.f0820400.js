"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[9619],{5680:(e,n,o)=>{o.d(n,{xA:()=>i,yg:()=>g});var t=o(6540);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function l(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function s(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var p=t.createContext({}),u=function(e){var n=t.useContext(p),o=n;return e&&(o="function"==typeof e?e(n):l(l({},n),e)),o},i=function(e){var n=u(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var o=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=u(o),d=a,g=m["".concat(p,".").concat(d)]||m[d]||c[d]||r;return o?t.createElement(g,l(l({ref:n},i),{},{components:o})):t.createElement(g,l({ref:n},i))}));function g(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=o.length,l=new Array(r);l[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[m]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<r;u++)l[u]=o[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,o)}d.displayName="MDXCreateElement"},9365:(e,n,o)=>{o.d(n,{A:()=>l});var t=o(6540),a=o(53);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:o,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,l),hidden:o},n)}},1470:(e,n,o)=>{o.d(n,{A:()=>w});var t=o(8168),a=o(6540),r=o(53),l=o(3104),s=o(6347),p=o(7485),u=o(1682),i=o(9466);function m(e){return function(e){var n,o;return null!=(n=null==(o=a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:o.filter(Boolean))?n:[]}(e).map((e=>{let{props:{value:n,label:o,attributes:t,default:a}}=e;return{value:n,label:o,attributes:t,default:a}}))}function c(e){const{values:n,children:o}=e;return(0,a.useMemo)((()=>{const e=null!=n?n:m(o);return function(e){const n=(0,u.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,o])}function d(e){let{value:n,tabValues:o}=e;return o.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:o}=e;const t=(0,s.W6)(),r=function(e){let{queryString:n=!1,groupId:o}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=o?o:null}({queryString:n,groupId:o});return[(0,p.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})}),[r,t])]}function y(e){const{defaultValue:n,queryString:o=!1,groupId:t}=e,r=c(e),[l,s]=(0,a.useState)((()=>function(e){var n;let{defaultValue:o,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(o){if(!d({value:o,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+o+'" but none of its children has the corresponding value. Available values are: '+t.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return o}const a=null!=(n=t.find((e=>e.default)))?n:t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[p,u]=g({queryString:o,groupId:t}),[m,y]=function(e){let{groupId:n}=e;const o=function(e){return e?"docusaurus.tab."+e:null}(n),[t,r]=(0,i.Dv)(o);return[t,(0,a.useCallback)((e=>{o&&r.set(e)}),[o,r])]}({groupId:t}),f=(()=>{const e=null!=p?p:m;return d({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error("Can't select invalid tab value="+e);s(e),u(e),y(e)}),[u,y,r]),tabValues:r}}var f=o(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:o,selectedValue:s,selectValue:p,tabValues:u}=e;const i=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.a_)(),c=e=>{const n=e.currentTarget,o=i.indexOf(n),t=u[o].value;t!==s&&(m(n),p(t))},d=e=>{var n;let o=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{var t;const n=i.indexOf(e.currentTarget)+1;o=null!=(t=i[n])?t:i[0];break}case"ArrowLeft":{var a;const n=i.indexOf(e.currentTarget)-1;o=null!=(a=i[n])?a:i[i.length-1];break}}null==(n=o)||n.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":o},n)},u.map((e=>{let{value:n,label:o,attributes:l}=e;return a.createElement("li",(0,t.A)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>i.push(e),onKeyDown:d,onClick:c},l,{className:(0,r.A)("tabs__item",b.tabItem,null==l?void 0:l.className,{"tabs__item--active":s===n})}),null!=o?o:n)})))}function v(e){let{lazy:n,children:o,selectedValue:t}=e;const r=(Array.isArray(o)?o:[o]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===t));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function C(e){const n=y(e);return a.createElement("div",{className:(0,r.A)("tabs-container",b.tabList)},a.createElement(h,(0,t.A)({},e,n)),a.createElement(v,(0,t.A)({},e,n)))}function w(e){const n=(0,f.A)();return a.createElement(C,(0,t.A)({key:String(n)},e))}},8113:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>m});var t=o(8168),a=(o(6540),o(5680)),r=o(1470),l=o(9365);const s={id:"common-plugins",title:"Common Plugins"},p=void 0,u={unversionedId:"guides/integration-examples/common-plugins",id:"guides/integration-examples/common-plugins",title:"Common Plugins",description:"Typegoose supports mongoose plugins and this Guide will showcase how to use some plugins, more plugins or updating their versions can be done with a PR to typegoose's repository.",source:"@site/../docs/guides/integration-examples/common-plugins.mdx",sourceDirName:"guides/integration-examples",slug:"/guides/integration-examples/common-plugins",permalink:"/typegoose/docs/guides/integration-examples/common-plugins",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/integration-examples/common-plugins.mdx",tags:[],version:"current",frontMatter:{id:"common-plugins",title:"Common Plugins"},sidebar:"guides",previous:{title:"Using with @deepkit/type",permalink:"/typegoose/docs/guides/integration-examples/using-with-deepkit-type"},next:{title:"Typegoose Logger",permalink:"/typegoose/docs/guides/advanced/logger"}},i={},m=[{value:"mongoose-autopopulate",id:"mongoose-autopopulate",level:2},{value:"mongoose-findorcreate",id:"mongoose-findorcreate",level:2},{value:"mongoose-sequence",id:"mongoose-sequence",level:2},{value:"@typegoose/auto-increment",id:"typegooseauto-increment",level:2},{value:"AutoIncrementSimple",id:"autoincrementsimple",level:3},{value:"AutoIncrementID",id:"autoincrementid",level:3}],c={toc:m},d="wrapper";function g(e){let{components:n,...o}=e;return(0,a.yg)(d,(0,t.A)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Typegoose supports mongoose plugins and this Guide will showcase how to use some plugins, more plugins or updating their versions can be done with a PR to ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/typegoose/typegoose"},"typegoose's repository"),"."),(0,a.yg)("p",null,"If the Example does not have tabs for ",(0,a.yg)("inlineCode",{parentName:"p"},"esModuleInterop"),", then assume it is only written and tested for ",(0,a.yg)("inlineCode",{parentName:"p"},"esModuleInterop: false"),"."),(0,a.yg)("h2",{id:"mongoose-autopopulate"},"mongoose-autopopulate"),(0,a.yg)("p",null,"Last updated for:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-txt"},"@typegoose/typegoose@9.0.0\nmongoose-autopopulate@0.14.0\n")),(0,a.yg)(r.A,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.yg)(l.A,{value:"npm",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install --save mongoose-autopopulate\n"))),(0,a.yg)(l.A,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add mongoose-autopopulate\n"))),(0,a.yg)(l.A,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"pnpm add mongoose-autopopulate\n")))),(0,a.yg)("p",null,"Typegoose has the prop option ",(0,a.yg)("inlineCode",{parentName:"p"},"autopopulate")," implemented, but it only has an effect, if ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/mongodb-js/mongoose-autopopulate"},(0,a.yg)("inlineCode",{parentName:"a"},"mongoose-autopopulate"))," is installed and used too."),(0,a.yg)(r.A,{groupId:"esModuleInterop",mdxType:"Tabs"},(0,a.yg)(l.A,{value:"esModuleInterop-false",label:"esModuleInterop: false",default:!0,mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import mongoose from 'mongoose';\nimport * as autopopulate from 'mongoose-autopopulate';\nimport { plugin, prop, Ref, getModelForClass } from '@typegoose/typegoose';\n\n@plugin(autopopulate as any) // this is a dirty fix, because the types of this plugin don't work with \"esModuleInterop: false\"\nclass SomeClass {\n  @prop({ autopopulate: true, ref: 'SomeReferencedClass' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n\nclass SomeReferencedClass {\n  // a dummy property is required, otherwise the class will equal to others\n  @prop()\n  public dummy?: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\nconst SomeReferencedClassModel = getModelForClass(SomeReferencedClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  const reference = await SomeReferencedClassModel.create({ dummy: 'hello' });\n  const { _id: id } = await SomeClassModel.create({ populateField: reference } as SomeClass);\n\n  console.log(await SomeClassModel.findById(id).exec()); // output will be populated\n\n  await mongoose.disconnect();\n})();\n"))),(0,a.yg)(l.A,{value:"esModuleInterop-true",label:"esModuleInterop: true",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import mongoose from 'mongoose';\nimport autopopulate from 'mongoose-autopopulate';\nimport { plugin, prop, Ref, getModelForClass } from '@typegoose/typegoose';\n\n@plugin(autopopulate)\nclass SomeClass {\n  @prop({ autopopulate: true, ref: 'SomeReferencedClass' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n\nclass SomeReferencedClass {\n  // a dummy property is required, otherwise the class will equal to others\n  @prop()\n  public dummy?: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\nconst SomeReferencedClassModel = getModelForClass(SomeReferencedClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  const reference = await SomeReferencedClassModel.create({ dummy: 'hello' });\n  const { _id: id } = await SomeClassModel.create({ populateField: reference } as SomeClass);\n\n  console.log(await SomeClassModel.findById(id).exec()); // output will be populated\n\n  await mongoose.disconnect();\n})();\n")))),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"If you have a ",(0,a.yg)("inlineCode",{parentName:"p"},"ref")," which refers back to its own class/model, like having a User class with a ",(0,a.yg)("inlineCode",{parentName:"p"},"createdBy")," field referring back to User, then you'll need to set the ",(0,a.yg)("inlineCode",{parentName:"p"},"maxDepth")," prop of ",(0,a.yg)("inlineCode",{parentName:"p"},"autocomplete")," to 1. If you don't do this, Mongoose will do recursive calls to\nthe user collection 10 times, extremely delaying the output of the query. Below is an example of how to set ",(0,a.yg)("inlineCode",{parentName:"p"},"maxDepth"),".")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'// the types of "autopopulate" may change depending on the tsconfig option "esModuleInterop"\n@plugin(autopopulate as any) // this is a dirty fix, because the types of this plugin don\'t work\nclass SomeClass {\n  @prop({ autopopulate: { maxDepth: 1 }, ref: \'SomeReferencedClass\' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n')),(0,a.yg)("h2",{id:"mongoose-findorcreate"},"mongoose-findorcreate"),(0,a.yg)("p",null,"Last updated for:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-txt"},"@typegoose/typegoose@11.0.0\nmongoose-findorcreate@4.0.0\n")),(0,a.yg)(r.A,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.yg)(l.A,{value:"npm",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install --save mongoose-findorcreate\n"))),(0,a.yg)(l.A,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add mongoose-findorcreate\n"))),(0,a.yg)(l.A,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"pnpm add mongoose-findorcreate\n")))),(0,a.yg)("p",null,"The plugin ",(0,a.yg)("inlineCode",{parentName:"p"},"mongoose-findorcreate")," can easily be used with typegoose. Here's how to use it:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { DocumentType, getModelForClass, plugin, prop, defaultClasses } from '@typegoose/typegoose';\nimport mongoose from 'mongoose';\nimport * as findorcreate from 'mongoose-findorcreate';\n\n/**\n * Result for the `findOrCreate` function from mongoose-findorcreate\n */\nexport interface FindOrCreateResult<T> {\n  created: boolean;\n  doc: DocumentType<T>;\n}\n\n/**\n * This class contains all types for the module \"mongoose-findorcreate\", adjusted for typegoose\n */\n@plugin(findorcreate)\nexport abstract class FindOrCreate {\n  public static findOrCreate: <T extends FindOrCreate>(\n    this: mongoose.Model<T>,\n    condition: FilterQuery<T>,\n    createWith?: any\n  ) => Promise<FindOrCreateResult<T>>;\n}\n\nclass SomeClass extends FindOrCreate {\n  @prop()\n  public someField!: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  console.log(await SomeClassModel.findOrCreate({ someField: 'Hello' }));\n  console.log(await SomeClassModel.findOrCreate({ someField: 'Hello' })); // both will give the same output\n\n  await mongoose.disconnect();\n})();\n")),(0,a.yg)("p",null,"A full example can be found in the ",(0,a.yg)("inlineCode",{parentName:"p"},"typegoose-examples")," repository under ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/typegoose/typegoose-examples/tree/master/examples/plugin-findorcreate"},(0,a.yg)("inlineCode",{parentName:"a"},"examples/plugin-findorcreate")),"."),(0,a.yg)("h2",{id:"mongoose-sequence"},"mongoose-sequence"),(0,a.yg)("p",null,"Last updated for:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-txt"},"@typegoose/typegoose@7.1.0\nmongoose-sequence@5.0.0\n")),(0,a.yg)(r.A,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.yg)(l.A,{value:"npm",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install --save mongoose-sequence\n"))),(0,a.yg)(l.A,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add mongoose-sequence\n"))),(0,a.yg)(l.A,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"pnpm add mongoose-sequence\n")))),(0,a.yg)("p",null,"To use ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/ramiel/mongoose-sequence"},(0,a.yg)("inlineCode",{parentName:"a"},"mongoose-sequence")),", import the plugin and use it like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import AutoIncrementFactory from 'mongoose-sequence';\n\n// AutoIncrement now is the instance\nconst AutoIncrement = AutoIncrementFactory(mongoose);\n\n@plugin(AutoIncrement, { inc_field: '_id', start_seq: 200 })\nclass SomeClass extends defaultClasses.Base<number> {\n  @prop()\n  public _id: number;\n}\n\n// The Plugin options can be applied too\n@plugin<mongoose.SequenceOptions>(AutoIncrement, { inc_field: '_id' }) // Note: \"start_seq\" is not in the \"SequenceOptions\" type\nclass SomeClass extends defaultClasses.Base<number> {\n  @prop()\n  public _id!: number;\n}\n")),(0,a.yg)("p",null,"For more details, see ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/ramiel/mongoose-sequence/issues/83"},"this issue"),"."),(0,a.yg)("h2",{id:"typegooseauto-increment"},"@typegoose/auto-increment"),(0,a.yg)("p",null,"Last updated for:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-txt"},"@typegoose/typegoose@11.0.0-beta.1\n@typegoose/auto-increment@3.0.0\n")),(0,a.yg)(r.A,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.yg)(l.A,{value:"npm",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm install --save @typegoose/auto-increment\n"))),(0,a.yg)(l.A,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add @typegoose/auto-increment\n"))),(0,a.yg)(l.A,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"pnpm add @typegoose/auto-increment\n")))),(0,a.yg)("p",null,"The Typegoose project provides an ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/typegoose/auto-increment"},(0,a.yg)("inlineCode",{parentName:"a"},"auto-increment")," plugin")," for Mongoose. Here is how to use it:"),(0,a.yg)("h3",{id:"autoincrementsimple"},"AutoIncrementSimple"),(0,a.yg)("p",null,"Always increments the field on each save"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"@plugin(AutoIncrementSimple, [{ field: 'someIncrementedField' }])\nclass SomeClass {\n  @prop() // does not need to be empty\n  public someIncrementedField: number;\n}\n\nconst SomeModel = getModelForClass(SomeClass);\n\nconst doc = await SomeModel.create({ someIncrementedField: 10 });\n\nawait doc.save(); // someIncrementedField will be 11\n")),(0,a.yg)("h3",{id:"autoincrementid"},"AutoIncrementID"),(0,a.yg)("p",null,"Only increases the field if the document is ",(0,a.yg)("em",{parentName:"p"},"new")," and the counter is stored in a counter-collection (default field: ",(0,a.yg)("inlineCode",{parentName:"p"},"_id"),")."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"@plugin(AutoIncrementID, {})\nclass SomeClass {\n  @prop()\n  public _id: number;\n\n  @prop() // does not need to be empty\n  public someIncrementedField: number;\n}\n\nconst SomeModel = getModelForClass(SomeClass);\n\nconst doc = await SomeModel.create({ someIncrementedField: 10 }); // _id will be 1\n")),(0,a.yg)("hr",null),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Some or all of the listed plugins might not have a ",(0,a.yg)("inlineCode",{parentName:"p"},"@types")," package, so types have to be mostly manually declared.")))}g.isMDXComponent=!0}}]);