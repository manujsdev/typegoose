"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[7026],{5680:(e,t,o)=>{o.d(t,{xA:()=>d,yg:()=>g});var n=o(6540);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(o),y=a,g=c["".concat(l,".").concat(y)]||c[y]||u[y]||i;return o?n.createElement(g,r(r({ref:t},d),{},{components:o})):n.createElement(g,r({ref:t},d))}));function g(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=o.length,r=new Array(i);r[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=o[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,o)}y.displayName="MDXCreateElement"},8052:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=o(8168),a=(o(6540),o(5680));const i={id:"faq",title:"FAQ"},r=void 0,s={unversionedId:"guides/faq",id:"guides/faq",title:"FAQ",description:"Repository",source:"@site/../docs/guides/faq.md",sourceDirName:"guides",slug:"/guides/faq",permalink:"/typegoose/docs/guides/faq",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/faq.md",tags:[],version:"current",frontMatter:{id:"faq",title:"FAQ"},sidebar:"guides",previous:{title:"Quick Start Guide",permalink:"/typegoose/docs/guides/quick-start-guide"},next:{title:"Known Issues",permalink:"/typegoose/docs/guides/known-issues"}},l={},p=[{value:"Repository",id:"repository",level:2},{value:"What happened to the original author?",id:"what-happened-to-the-original-author",level:3},{value:"Is this Project still active?",id:"is-this-project-still-active",level:3},{value:"Why is the package now released in another package?",id:"why-is-the-package-now-released-in-another-package",level:3},{value:"Why <code>@typegoose/typegoose</code>",id:"why-typegoosetypegoose",level:3},{value:"Functional",id:"functional",level:2},{value:"Why does <code>new Model({})</code> not have types?",id:"why-does-new-model-not-have-types",level:3},{value:"Do all Classes get compiled to their own <code>mongoose.Schema</code>?",id:"do-all-classes-get-compiled-to-their-own-mongooseschema",level:3},{value:"I need to set <code>_id</code> manually, how to do it properly?",id:"i-need-to-set-_id-manually-how-to-do-it-properly",level:3},{value:"Edge Cases",id:"edge-cases",level:2},{value:"I want to the return document with property <code>id</code> instead of <code>_id</code>",id:"i-want-to-the-return-document-with-property-id-instead-of-_id",level:3},{value:"Why is <code>_id</code> <code>unknown</code>?",id:"why-is-_id-unknown",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...o}=e;return(0,a.yg)(c,(0,n.A)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"repository"},"Repository"),(0,a.yg)("h3",{id:"what-happened-to-the-original-author"},"What happened to the original author?"),(0,a.yg)("p",null,"A: The original author szokodiakos (github name) ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/szokodiakos/typegoose/issues/99#issuecomment-364639150"},"has abandoned the project"),", but might look into it again at some time."),(0,a.yg)("h3",{id:"is-this-project-still-active"},"Is this Project still active?"),(0,a.yg)("p",null,"A: Yes it is, but not on the main repository anymore because of ",(0,a.yg)("a",{parentName:"p",href:"#what-happened-to-the-original-author"},"What happened to the original author?")," and ",(0,a.yg)("a",{parentName:"p",href:"https://help.github.com/en/articles/permission-levels-for-a-user-account-repository"},"Github Permissions")," (TL;DR: a collaborator cannot add another collaborator, only the owner can)"),(0,a.yg)("h3",{id:"why-is-the-package-now-released-in-another-package"},"Why is the package now released in another package?"),(0,a.yg)("p",null,"(context: from ",(0,a.yg)("inlineCode",{parentName:"p"},"typegoose")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"@typegoose/typegoose"),")",(0,a.yg)("br",{parentName:"p"}),"\n","A: Because of a Repository Switch (",(0,a.yg)("a",{parentName:"p",href:"#is-this-project-still-active"},"reasons"),") and because a name cannot be used by multiple packages, except if it is scoped."),(0,a.yg)("h3",{id:"why-typegoosetypegoose"},"Why ",(0,a.yg)("inlineCode",{parentName:"h3"},"@typegoose/typegoose")),(0,a.yg)("p",null,"A: Because I (hasezoey) don't have permissions over the old ",(0,a.yg)("inlineCode",{parentName:"p"},"typegoose")," repository and I don't want to touch the old npm package. It is a typical forking and continuation of an ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Open-source_software"},"OSS")," project."),(0,a.yg)("h2",{id:"functional"},"Functional"),(0,a.yg)("h3",{id:"why-does-new-model-not-have-types"},"Why does ",(0,a.yg)("inlineCode",{parentName:"h3"},"new Model({})")," not have types?"),(0,a.yg)("p",null,"A: Since around mongoose 6.0.0, ",(0,a.yg)("inlineCode",{parentName:"p"},"new Model()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Model.create()")," have types, but they are not enforced (as in they will be suggested, but will not error if not present / other unknown properties are present)."),(0,a.yg)("h3",{id:"do-all-classes-get-compiled-to-their-own-mongooseschema"},"Do all Classes get compiled to their own ",(0,a.yg)("inlineCode",{parentName:"h3"},"mongoose.Schema"),"?"),(0,a.yg)("p",null,"A: Yes, all classes compiled through typegoose (like ",(0,a.yg)("inlineCode",{parentName:"p"},"type: () => SubClass"),", or by reflection) will be their own ",(0,a.yg)("inlineCode",{parentName:"p"},"mongoose.Schema"),"."),(0,a.yg)("p",null,"This means that the following is equal:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'// Native Mongoose\nconst subSchema = new mongoose.Schema({ someprop: { type: String } });\nconst mainSchema = new mongoose.Schema({\n  subDoc: subSchema\n})\n\n// Typegoose\nclass Sub {\n  @prop()\n  public someprop: string;\n}\n\nclass Main {\n  @prop()\n  public subDoc: Sub; // by reflection, not explicitly defining option "type"\n  // OR\n  @prop({ type: () => Sub }) // defining option "type" explicitly\n  public subDoc: Sub;\n}\n')),(0,a.yg)("p",null,"There is also a option to not use sub-classes, called ",(0,a.yg)("a",{parentName:"p",href:"/typegoose/docs/api/decorators/prop#passthrough-class"},"the ",(0,a.yg)("inlineCode",{parentName:"a"},"Passthrough")," class"),", but it is not recommended to be used."),(0,a.yg)("h3",{id:"i-need-to-set-_id-manually-how-to-do-it-properly"},"I need to set ",(0,a.yg)("inlineCode",{parentName:"h3"},"_id")," manually, how to do it properly?"),(0,a.yg)("p",null,"A: ",(0,a.yg)("inlineCode",{parentName:"p"},"_id")," can be easily defined in the class itself, but note that no ",(0,a.yg)("inlineCode",{parentName:"p"},"@prop")," should be set, unless you want to overwrite the defaults (like type or how defaults are generated)"),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'// not overwriting the defaults\nclass Main {\n  // no "@prop" because of not wanting to overwrite the defaults\n  public _id!: mongoose.Types.ObjectId;\n}\n\nclass Main2 {\n  // overwrite the "_id" type to be a string and generated by a uuidv4 function\n  @prop({ required: true, default: () => uuidv4() })\n  public _id!: string;\n}\n')),(0,a.yg)("h2",{id:"edge-cases"},"Edge Cases"),(0,a.yg)("h3",{id:"i-want-to-the-return-document-with-property-id-instead-of-_id"},"I want to the return document with property ",(0,a.yg)("inlineCode",{parentName:"h3"},"id")," instead of ",(0,a.yg)("inlineCode",{parentName:"h3"},"_id")),(0,a.yg)("p",null,"Mongoose automatically adds a virtual named ",(0,a.yg)("inlineCode",{parentName:"p"},"id"),", use the following for type definitions if it does not already exist:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"class Cat {\n  id: mongoose.Types.ObjectId;\n  _id: mongoose.Types.ObjectId;\n}\n")),(0,a.yg)("h3",{id:"why-is-_id-unknown"},"Why is ",(0,a.yg)("inlineCode",{parentName:"h3"},"_id")," ",(0,a.yg)("inlineCode",{parentName:"h3"},"unknown"),"?"),(0,a.yg)("p",null,"Your class is likely just empty, and typescript somehow does not correctly match that and treats it like a generic object."),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"class Dummy {}\nconst DummyModel = getModelForClass(Dummy);\nconst newDoc = new DummyModel()\nnewDoc._id; // type: unknown\n\nclass Dummy {\n  // simple dummy property for types, will complain if actually used\n  public _dummy: never;\n}\nconst DummyModel = getModelForClass(Dummy);\nconst newDoc = new DummyModel()\nnewDoc._id; // type: mongoose.Types.ObjectId\n")))}u.isMDXComponent=!0}}]);