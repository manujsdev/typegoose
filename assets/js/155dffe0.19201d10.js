"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[1169],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>d});var r=n(6540);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(n),y=s,d=u["".concat(l,".").concat(y)]||u[y]||f[y]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=y;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:s,i[1]=a;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},848:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=n(8168),s=(n(6540),n(5680));const o={id:"assertions",title:"assertion"},i=void 0,a={unversionedId:"api/functions/assertions",id:"api/functions/assertions",title:"assertion",description:"assertion",source:"@site/../docs/api/functions/assertions.md",sourceDirName:"api/functions",slug:"/api/functions/assertions",permalink:"/typegoose/docs/api/functions/assertions",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/functions/assertions.md",tags:[],version:"current",frontMatter:{id:"assertions",title:"assertion"}},l={},p=[{value:"assertion",id:"assertion",level:2},{value:"assertionIsClass",id:"assertionisclass",level:2}],c={toc:p},u="wrapper";function f(e){let{components:t,...n}=e;return(0,s.yg)(u,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("h2",{id:"assertion"},"assertion"),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"assertion(cond, error?)")," is a custom assertion function that utilizes ",(0,s.yg)("a",{parentName:"p",href:"https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#assertion-functions"},(0,s.yg)("inlineCode",{parentName:"a"},"asserts")," from typescript 3.7"),".",(0,s.yg)("br",{parentName:"p"}),"\n","-> This function is mainly build for internal use, but can also be used outside of typegoose"),(0,s.yg)("p",null,"Example:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-ts"},'let someMultiValue: string | number | boolean = \'Hello\';\n// "someMultiValue"\'s type is currently "string | number | boolean", even with a string defined\nassertion(typeof someMultiValue === \'string\');\n// now the type of "someMultiValue" is just "string" and an error is thrown if it is not a string\n')),(0,s.yg)("admonition",{type:"note"},(0,s.yg)("p",{parentName:"admonition"},"The function is named ",(0,s.yg)("inlineCode",{parentName:"p"},"assertion")," and not ",(0,s.yg)("inlineCode",{parentName:"p"},"assert"),", so do not confuse it and the types of testing frameworks and from NodeJS itself.")),(0,s.yg)("h2",{id:"assertionisclass"},"assertionIsClass"),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"assertionIsClass(class)")," is like ",(0,s.yg)("a",{parentName:"p",href:"#assertion"},"assertion"),", but with a set condition and error pre-defined.",(0,s.yg)("br",{parentName:"p"}),"\n","-> this function is mainly built for internal use, but can also be used outside of typegoose"))}f.isMDXComponent=!0}}]);