"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[9025],{5680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>c});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),d=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=d(e.components);return o.createElement(i.Provider,{value:n},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},y=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=d(t),y=a,c=m["".concat(i,".").concat(y)]||m[y]||g[y]||r;return t?o.createElement(c,s(s({ref:n},l),{},{components:t})):o.createElement(c,s({ref:n},l))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=y;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[m]="string"==typeof e?e:a,s[1]=p;for(var d=2;d<r;d++)s[d]=t[d];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6686:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var o=t(8168),a=(t(6540),t(5680));const r={id:"hooks",title:"@pre & @post"},s=void 0,p={unversionedId:"api/decorators/hooks",id:"api/decorators/hooks",title:"@pre & @post",description:"@pre",source:"@site/../docs/api/decorators/hooks.md",sourceDirName:"api/decorators",slug:"/api/decorators/hooks",permalink:"/typegoose/docs/api/decorators/hooks",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/decorators/hooks.md",tags:[],version:"current",frontMatter:{id:"hooks",title:"@pre & @post"},sidebar:"docs",previous:{title:"@modelOptions",permalink:"/typegoose/docs/api/decorators/model-options"},next:{title:"@index",permalink:"/typegoose/docs/api/decorators/indexes"}},i={},d=[{value:"@pre",id:"pre",level:2},{value:"Example",id:"pre-example",level:2},{value:"@post",id:"post",level:2},{value:"Example",id:"post-example",level:2}],l={toc:d},m="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(m,(0,o.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"pre"},"@pre"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Typings:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"interface PreHooks {\n  pre<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: 'save',\n    fn: PreSaveMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: PreMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: PreMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<T extends Aggregate<any>>(method: 'aggregate' | RegExp, fn: PreMiddlewareFunction<T>, options?: SchemaPreOptions): ClassDecorator;\n  pre<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: (this: T, next: (err?: CallbackError) => void, docs: any | Array<any>) => void | Promise<void>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n}\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters:")),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,a.yg)("th",{parentName:"tr",align:"center"},"Type"),(0,a.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},(0,a.yg)("inlineCode",{parentName:"td"},"method")," ",(0,a.yg)("span",{class:"badge badge--secondary"},"Required")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"string \\| RegExp \\| string[]")),(0,a.yg)("td",{parentName:"tr",align:"left"},"The Method(s) to add the ",(0,a.yg)("inlineCode",{parentName:"td"},"fn")," to")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},(0,a.yg)("inlineCode",{parentName:"td"},"fn")," ",(0,a.yg)("span",{class:"badge badge--secondary"},"Required")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"Func")),(0,a.yg)("td",{parentName:"tr",align:"left"},"The Function to run for the Method(s) set in ",(0,a.yg)("inlineCode",{parentName:"td"},"method"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("a",{parentName:"td",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-pre"},(0,a.yg)("inlineCode",{parentName:"a"},"mongoose.SchemaPreOptions"))),(0,a.yg)("td",{parentName:"tr",align:"left"},"Options to set when to run the hook")))),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"@pre")," is used to set Document & Query pre hooks, works like ",(0,a.yg)("inlineCode",{parentName:"p"},"schema.pre")," only difference is the switched ",(0,a.yg)("inlineCode",{parentName:"p"},"options")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"method"),"(",(0,a.yg)("inlineCode",{parentName:"p"},"fn"),") parameter positions."),(0,a.yg)("p",null,"For parameter ",(0,a.yg)("inlineCode",{parentName:"p"},"options"),", look at the ",(0,a.yg)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-pre"},"mongoose for ",(0,a.yg)("inlineCode",{parentName:"a"},"schema.pre"))," or ",(0,a.yg)("a",{parentName:"p",href:"https://mongoosejs.com/docs/middleware.html#naming"},"mongoose Middleware section Naming Conflicts"),"."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Arrow Functions cannot be used here, because the binding of ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," is required to get & modify the Document / Query / Aggregate.")),(0,a.yg)("h2",{id:"pre-example"},"Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"@pre<Car>('save', function () {\n  if (this.model === 'Tesla') {\n    this.isFast = true;\n  }\n})\nclass Car {\n  @prop({ required: true })\n  public model!: string;\n\n  @prop()\n  public isFast?: boolean;\n}\n")),(0,a.yg)("h2",{id:"post"},"@post"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Typings:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"interface PostHooks {\n  post<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: PostMiddlewareFunction<T, QueryResultType<T>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: PostMiddlewareFunction<T, T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<T extends Aggregate<any>>(\n    method: 'aggregate' | RegExp,\n    fn: PostMiddlewareFunction<T, Array<AggregateExtract<T>>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: PostMiddlewareFunction<T, T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n\n  // error handling post hooks\n  post<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<T extends Aggregate<any>>(\n    method: 'aggregate' | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T, Array<any>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n}\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters:")),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,a.yg)("th",{parentName:"tr",align:"center"},"Type"),(0,a.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},(0,a.yg)("inlineCode",{parentName:"td"},"method")," ",(0,a.yg)("span",{class:"badge badge--secondary"},"Required")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"string \\| RegExp \\| string[]")),(0,a.yg)("td",{parentName:"tr",align:"left"},"The Method(s) to add the ",(0,a.yg)("inlineCode",{parentName:"td"},"fn")," to")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},(0,a.yg)("inlineCode",{parentName:"td"},"fn")," ",(0,a.yg)("span",{class:"badge badge--secondary"},"Required")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("inlineCode",{parentName:"td"},"Func")),(0,a.yg)("td",{parentName:"tr",align:"left"},"The Function to run for the Method(s) set in ",(0,a.yg)("inlineCode",{parentName:"td"},"method"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},(0,a.yg)("inlineCode",{parentName:"td"},"options")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("a",{parentName:"td",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-post"},(0,a.yg)("inlineCode",{parentName:"a"},"mongoose.SchemaPreOptions"))),(0,a.yg)("td",{parentName:"tr",align:"left"},"Options to set when to run the hook")))),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"@post")," is used to set Document & Query pre hooks, works like ",(0,a.yg)("inlineCode",{parentName:"p"},"schema.post")," only difference is the switched ",(0,a.yg)("inlineCode",{parentName:"p"},"options")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"method"),"(",(0,a.yg)("inlineCode",{parentName:"p"},"fn"),") parameter positions."),(0,a.yg)("p",null,"For parameter ",(0,a.yg)("inlineCode",{parentName:"p"},"options"),", look at the ",(0,a.yg)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-post"},"mongoose for ",(0,a.yg)("inlineCode",{parentName:"a"},"schema.post"))," or ",(0,a.yg)("a",{parentName:"p",href:"https://mongoosejs.com/docs/middleware.html#naming"},"mongoose Middleware section Naming Conflicts"),"."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Arrow Functions cannot be used here, because the binding of ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," is required to get & modify the Document / Query / Aggregate.")),(0,a.yg)("h2",{id:"post-example"},"Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"@post<Car>('save', (car) => {\n  if (car.topSpeedInKmH > 300) {\n    console.log(car.model, 'is fast!');\n  }\n})\nclass Car {\n  @prop({ required: true })\n  public model!: string;\n\n  @prop({ required: true })\n  public topSpeedInKmH!: number;\n}\n")))}g.isMDXComponent=!0}}]);