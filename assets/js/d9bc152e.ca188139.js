"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[7342],{5680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>g});var i=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=i.createContext({}),c=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),y=c(n),u=o,g=y["".concat(p,".").concat(u)]||y[u]||d[u]||a;return n?i.createElement(g,r(r({ref:t},l),{},{components:n})):i.createElement(g,r({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[y]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(8168),o=(n(6540),n(5680));const a={id:"overwrite-this",title:'Why overwrite "this"'},r=void 0,s={unversionedId:"guides/advanced/overwrite-this",id:"guides/advanced/overwrite-this",title:'Why overwrite "this"',description:'In the documentation for typegoose you may have already seen the following and asked "Why do i need to overwrite this"?',source:"@site/../docs/guides/advanced/overwrite-this.md",sourceDirName:"guides/advanced",slug:"/guides/advanced/overwrite-this",permalink:"/typegoose/docs/guides/advanced/overwrite-this",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/advanced/overwrite-this.md",tags:[],version:"current",frontMatter:{id:"overwrite-this",title:'Why overwrite "this"'},sidebar:"guides",previous:{title:"Manual Schema Modification",permalink:"/typegoose/docs/guides/advanced/manual-schema-modification"},next:{title:"Migrate to 12.0.0",permalink:"/typegoose/docs/guides/migration/migrate-12"}},p={},c=[{value:"Reason for overwriting",id:"reason-for-overwriting",level:2},{value:"Typescript Notes",id:"typescript-notes",level:2},{value:"Difference between value and type",id:"difference-between-value-and-type",level:3}],l={toc:c},y="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(y,(0,i.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,'In the documentation for typegoose you may have already seen the following and asked "Why do i need to overwrite ',(0,o.yg)("inlineCode",{parentName:"p"},"this"),'"?'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'class Kitten {\n  // Note the following "this"\n  public goEat(this: DocumentType<Kitten>, where: string) {\n    // ...code to eat\n  }\n}\n')),(0,o.yg)("h2",{id:"reason-for-overwriting"},"Reason for overwriting"),(0,o.yg)("p",null,"The reason would be that by default the type would implicitly be ",(0,o.yg)("inlineCode",{parentName:"p"},"this: Kitten"),"(instance), which does not give access to the document functions and would also be the wrong type and so could wrongly assume ",(0,o.yg)("inlineCode",{parentName:"p"},"this instanceof Kitten")," would work, whereas that would not actually be true."),(0,o.yg)("p",null,"For Instance methods the implicit type would be ",(0,o.yg)("inlineCode",{parentName:"p"},"this: Kitten"),"(instance), whereas the correct type would be ",(0,o.yg)("inlineCode",{parentName:"p"},"this: DocumentType<Kitten>"),".",(0,o.yg)("br",{parentName:"p"}),"\n","For Static methods the implicit type would be ",(0,o.yg)("inlineCode",{parentName:"p"},"this: typeof Kitten"),"(static), whereas the correct type would be ",(0,o.yg)("inlineCode",{parentName:"p"},"this: ReturnModelType<typeof Kitten>"),"."),(0,o.yg)("p",null,"The same also applies to other places like validators or QueryHelpers where the ",(0,o.yg)("inlineCode",{parentName:"p"},"this")," may need to be overwritten."),(0,o.yg)("h2",{id:"typescript-notes"},"Typescript Notes"),(0,o.yg)("p",null,"This section has some typescript notes that are subtle and can cause confusion."),(0,o.yg)("h3",{id:"difference-between-value-and-type"},"Difference between value and type"),(0,o.yg)("p",null,"The Type ",(0,o.yg)("inlineCode",{parentName:"p"},"Kitten")," is not, infact, the class ",(0,o.yg)("inlineCode",{parentName:"p"},"Kitten")," but the ",(0,o.yg)("em",{parentName:"p"},"instance")," of ",(0,o.yg)("inlineCode",{parentName:"p"},"Kitten"),", to actually get the static you would need to do ",(0,o.yg)("inlineCode",{parentName:"p"},"typeof Kitten"),".\nIf you would ever need to get the ",(0,o.yg)("em",{parentName:"p"},"instance"),"(",(0,o.yg)("inlineCode",{parentName:"p"},"Kitten"),") type of a class while you only have the input of a ",(0,o.yg)("em",{parentName:"p"},"static"),"(",(0,o.yg)("inlineCode",{parentName:"p"},"typeof Kitten"),"), there is a Typescript Utility Type called ",(0,o.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#instancetypetype"},(0,o.yg)("inlineCode",{parentName:"a"},"InstanceType")),". (Which was also the reason why typegoose had to rename its ",(0,o.yg)("a",{parentName:"p",href:"../migration/migrate-6#instancetype-changed"},(0,o.yg)("inlineCode",{parentName:"a"},"InstanceType")," to ",(0,o.yg)("inlineCode",{parentName:"a"},"DocumentType")),")"),(0,o.yg)("p",null,"Example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'class Kitten {\n  public dummy?: string;\n}\n\n// the two basic differences, static & instance:\n\n// T1 & T2 are "typeof Kitten" (static Kitten) and are interchangeable definitions\nconst T1 = Kitten;\n// explicit type\nconst T2: typeof Kitten = Kitten;\n\n// T3 & T4 are "Kitten" (instance of Kitten) and are interchangeable definitions\nconst T3 = new Kitten();\n// explicit type\nconst T4: Kitten = new Kitten();\n\n// combinations & errors\n\n// T5 & T6 are "Kitten" (instance of Kitten), whereas the assigned value of T5 is "typeof Kitten" (static Kitten)\nconst T5: Kitten = Kitten; // Error: Value of type \'typeof Kitten\' has no properties in common with type \'Kitten\'. Did you mean to call it?\nconst T6: Kitten = new Kitten(); // this is actually the correct type\n\n// T7 is "typeof Kitten" (static Kitten), and assigned is a "Kitten" (instance of Kitten)\nconst T7: typeof Kitten = new Kitten(); // Error: Property \'prototype\' is missing in type \'Kitten\' but required in type \'typeof Kitten\'\n')),(0,o.yg)("p",null,"Also note that the rules slightly change if the class is ",(0,o.yg)("em",{parentName:"p"},"empty"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'class Kitten {}\n\n// the two basic differences, static & instance:\n\n// T1 & T2 are "typeof Kitten" (static Kitten)\nconst T1 = Kitten;\n// explicit type\nconst T2: typeof Kitten = Kitten;\n\n// T3 & T4 are "Kitten" (instance of Kitten)\nconst T3 = new Kitten();\n// explicit type\nconst T4: Kitten = new Kitten();\n\n// combinations & errors\n\n// DIFFERENCE\n// T5 & T6 are "Kitten" (instance of Kitten), whereas the assigned value of T5 is "typeof Kitten" (static Kitten)\nconst T5: Kitten = Kitten; // somehow this does not result in any error\nconst T6: Kitten = new Kitten(); // this is actually the correct type\n\n// T7 is "typeof Kitten" (static Kitten), and assigned is a "Kitten" (instance of Kitten)\nconst T7: typeof Kitten = new Kitten(); // Error: Property \'prototype\' is missing in type \'Kitten\' but required in type \'typeof Kitten\'\n')))}d.isMDXComponent=!0}}]);