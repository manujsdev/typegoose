"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[7521],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=c(t),g=a,m=l["".concat(p,".").concat(g)]||l[g]||u[g]||o;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6122:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(8168),a=(t(6540),t(5680));const o={id:"searchIndexes",title:"@searchIndex"},i=void 0,s={unversionedId:"api/decorators/searchIndexes",id:"api/decorators/searchIndexes",title:"@searchIndex",description:"Typings:",source:"@site/../docs/api/decorators/searchIndexes.md",sourceDirName:"api/decorators",slug:"/api/decorators/searchIndexes",permalink:"/typegoose/docs/api/decorators/searchIndexes",draft:!1,editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/decorators/searchIndexes.md",tags:[],version:"current",frontMatter:{id:"searchIndexes",title:"@searchIndex"},sidebar:"docs",previous:{title:"@index",permalink:"/typegoose/docs/api/decorators/indexes"},next:{title:"@plugin",permalink:"/typegoose/docs/api/decorators/plugin"}},p={},c=[{value:"Example",id:"example",level:2}],d={toc:c},l="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(l,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Typings:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"function searchIndex(description: SearchIndexDescription): ClassDecorator\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters:")),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,a.yg)("th",{parentName:"tr",align:"center"},"Type"),(0,a.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},(0,a.yg)("inlineCode",{parentName:"td"},"description")," ",(0,a.yg)("span",{class:"badge badge--secondary"},"Required")),(0,a.yg)("td",{parentName:"tr",align:"center"},(0,a.yg)("a",{parentName:"td",href:"https://mongodb.github.io/node-mongodb-native/6.5/interfaces/SearchIndexDescription.html"},(0,a.yg)("inlineCode",{parentName:"a"},"SearchIndexDescription"))),(0,a.yg)("td",{parentName:"tr",align:"left"},"Description of the search index, including definition and optional name")))),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"@searchIndex")," is used to set search indices on the schema, this decorator acts\nlike ",(0,a.yg)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/schema.html#Schema.prototype.searchIndex()"},(0,a.yg)("inlineCode",{parentName:"a"},"schema.searchIndex()")),"."),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Search indices are only supported in ",(0,a.yg)("inlineCode",{parentName:"p"},"M10")," (or higher) Mongo Atlas clusters running MongoDB 6.0+ or 7.0+. Full\ndocumentation\ncan be found ",(0,a.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/atlas/atlas-search/manage-indexes/"},"here"),".")),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Because creating a search index can be a very heavy operation, automatic creation of search indices is disabled by\ndefault. To enable automatic creation of search indices,\nthe ",(0,a.yg)("a",{parentName:"p",href:"https://mongoosejs.com/docs/guide.html#autoSearchIndex"},(0,a.yg)("inlineCode",{parentName:"a"},"autoSearchIndex"))," option must be set to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," in the\nschema options using the ",(0,a.yg)("a",{parentName:"p",href:"https://typegoose.github.io/typegoose/docs/api/decorators/model-options"},(0,a.yg)("inlineCode",{parentName:"a"},"@modelOptions")),"\ndecorator.")),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"// static search index that only maps some fields\n@searchIndex({\n  name: 'authorSearch',\n  definition: {\n    mappings: {\n      dynamic: false,\n      fields: {\n        birthday: { type: 'date' },\n        biography: { type: 'string' },\n      },\n    },\n  },\n})\nclass Author {\n  @prop({ required: true })\n  public name!: string;\n\n  @prop({ required: true })\n  public birthday!: Date;\n\n  @prop({ required: true })\n  public biography!: string;\n}\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"// dynamic index that maps all fields based on their type\n@searchIndex({ name: 'BookSearch', definition: { dynamic: true } })\nclass Book {\n  @prop({ required: true })\n  public title!: string;\n\n  @prop({ required: true })\n  public author!: Ref<Author>;\n\n  @prop({ required: true })\n  public description!: string;\n\n  @prop({ required: true })\n  public publicationYear!: number;\n}\n")))}u.isMDXComponent=!0}}]);